<?php

use Drupal\Core\Url;
use Drupal\node\NodeInterface;

function reseau_theme_suggestions_slick_alter(array &$suggestions, array $variables, $hook)
{
  $element     = $variables['element'];

  // Access the module settings containing all Slick info.
  $settings    = $element['#settings'];
  $skin        = $settings['skin'];

  if (!empty($skin)) {
    $suggestions[] = 'slick__' . strtr($skin, '-', '_');
  }


  if (!empty($settings['view_name'])) {

    if (!empty($settings['instance_id'])) {
      // $suggestions[] =  strtr($settings['instance_id'], '-', '_') ;

      $viewmode = explode('-', $settings['instance_id']);
      // Kint::dump($settings['current_view_mode']);
      // dsm($viewmode);
      // dsm($settings);

      if ($settings['view_name'] != 'actualites') {


        if (isset($settings['current_view_mode'])) {
        if ($viewmode['2'] == $settings['current_view_mode']) {

          $suggestions[] = 'slick__' . strtr($settings['view_name'], '-', '_') . '__' . strtr($settings['current_view_mode'], '-', '_');
        } else {
          $suggestions[] = 'slick__sliders__' . $viewmode['2'];
        }
        }
      } else {
        $suggestions[] = 'slick__' . strtr($settings['view_name'], '-', '_') . '__' . strtr($settings['current_view_mode'], '-', '_');
      }
    }
  }

  //  Kint::dump($settings);
  // Kint::dump($settings['instance_id']);
  // Kint::dump($settings['current_view_mode']);
  //  Kint::dump($settings['current_view_mode']);
  // \Kint::dump($variables);
  // Kint::dump($suggestions);
}



function reseau_theme_suggestions_file_link_alter(array &$suggestions, array $variables, $hook)
{

  // Get the node type.
  $node = \Drupal::routeMatch()->getParameter('node');
  if (isset($node)) {
    if (is_object($node)) {
      $type = $node->getType();
      $suggestions[] = 'file_link__' . 'type__' . $type;
    }
  }
}

function reseau_theme_suggestions_form_alter(array &$suggestions, array $variables)
{
  $formId = $variables['element']['#id'] ?? null;
  if ($formId) {
    $suggestions[] = 'form__' . str_replace('-', '_', $formId);
  }
}

function reseau_theme_suggestions_form_element_alter(array &$suggestions, array $variables, $hook)
{
  if (
    isset($variables['element']['#form_id'])
    && isset($variables['element']['#type'])
    && isset($variables['element']['#name'])
  ) {
    $element = $variables['element'];
    $formid = str_replace('-', '_', $element['#form_id']);
    $suggestions[] = $hook . '__' . $formid;
    $suggestions[] = $hook . '__' . $element['#type'] . '__' . $formid;
    $suggestions[] = $hook . '__' . $element['#name'] . '__' . $formid;
    $suggestions[] = $hook . '__' . $element['#name'] . '__' . $element['#type'] . '__' . $formid;
  }
}

function reseau_preprocess_media(array &$variables)
{
  $variables['media'] = $variables['elements']['#media'];
  if ($variables['media']->bundle() == 'document') {
    $file = $variables['elements']['#media']->field_media_document->entity;
    $file->setFilename($variables['name']);
  }

  // Fixing the media missed the quick edit attribute.
  //https://www.drupal.org/project/drupal/issues/3101267#comment-13711587
  if (!empty($variables["elements"]["#media"])) {
    $media = $variables["elements"]["#media"];
    $type = $media->getEntityType()->id();
    $id = $media->id();
    // dsm($media);
    if (!isset($variables['attributes']['data-quickedit-entity-id'])) {
      $variables['attributes']['data-quickedit-entity-id'] = $type . '/' . $id;
    }
  }
}


function reseau_preprocess_node(&$variables)
{
  $node    = $variables['node'];

  switch ($variables['node']->getType()) {

    case "formation":
      //  dsm($variables);

      if ($node->hasField('field_modalites_admission') && !$node->get('field_modalites_admission')->isEmpty()) {
      } else {
        $variables['content']['field_modalites_admission_comp']['#title'] = "Modalités d'accès";
        $variables['content']['field_modalites_admission_comp']['#label_display'] = 'above';
      }

      if ($node->hasField('field_financement') && !$node->get('field_financement')->isEmpty()) {
      } else {
        $variables['content']['field_financement_complement']['#title'] = "Financement";
        $variables['content']['field_financement_complement']['#label_display'] = 'above';
      }

      if ($node->hasField('field_modalites_evaluation') && !$node->get('field_modalites_evaluation')->isEmpty()) {
      } else {
        $variables['content']['field_modalites_eval_complement']['#title'] = "Modalités d'évaluation";
        $variables['content']['field_modalites_eval_complement']['#label_display'] = 'above';
      }

      if ($node->hasField('field_modalites_de_formation') && !$node->get('field_modalites_de_formation')->isEmpty()) {
      } else {
        $variables['content']['field_modalites_fmt_complement']['#title'] = "Méthodes pédagogiques";
        $variables['content']['field_modalites_fmt_complement']['#label_display'] = 'above';
      }

      if ($node->hasField('field_pre_requis') && !$node->get('field_pre_requis')->isEmpty()) {
      } else {
        $variables['content']['field_pre_requis_complement']['#title'] = "Pré-requis";
        $variables['content']['field_pre_requis_complement']['#label_display'] = 'above';
      }

      if ( $node->hasField('field_public_cible') && !$node->get('field_public_cible')->isEmpty() ) {
      } else {
      $variables['content']['field_public_cible_complement']['#title'] = "Public cible";
      $variables['content']['field_public_cible_complement']['#label_display'] = 'above';
      }
      if ( $node->hasField('field_certif_visee_libelle') && !$node->get('field_certif_visee_libelle')->isEmpty() ) {
        $variables['content']['field_certif_visee_libelle']['#title'] = "Certification visée";
      } else {


      }
  //     if ( $node->hasField('field_fmt_session') && $node->get('field_fmt_session')->isEmpty() ) {
  //       $variables['content']['field_fmt_session']['#markup'] = "<div style=\"margin-bottom: 3rem;\" class=\"field_fmt_session field_node_formation\"><div class=\"label\">
	// Dates prévisionnelles et délais d’accès	</div><div class=\"accordion\">	À définir - veuillez nous contacter	</div></div>";
  //     } else {
   
  //     }

      // dsm($node->nid->value);
      // if (($node->nid->value == '531') || ($node->nid->value == '268')) {
      // if ($node->hasField('field_fmt_image') && !$node->get('field_fmt_image')->isEmpty()) {
      //   // dsm($variables['content']['field_fmt_image']['#weight']);
      //   $variables['content']['field_fmt_image']['#weight'] = '2';
      // } else {
   
   
      // }
      // }

      // Si il n'y a pas de fiche formation transférée, on remlace le lien par le PDF généré
      if ($node->hasField('field_fiche_formation_pdf') && !$node->get('field_fiche_formation_pdf')->isEmpty()) {
      
      } else {
        
       $front =  Url::fromRoute('<front>', [], ['absolute' => TRUE])->toString();
       
        // dsm($variables['content']['field_fiche_formation_pdf']['#markup'] = "<div class=\"field_fiche_formation\"><span class=\"file file--mime-application-pdf file--application-pdf\"><a class=\"btn btn-primary\" href=\"".$front."/entity_pdf/node/".$node->nid->value."/export_pdf\" target=\"_blank\">Télécharger la fiche</a></span></div>");
        $variables['content']['field_fiche_formation_pdf']['#markup'] = "<div class=\"field_fiche_formation\"><span class=\"file file--mime-application-pdf file--application-pdf\"><a class=\"btn btn-primary\" href=\"".$front."/entity_pdf/node/".$node->nid->value."/export_pdf\" target=\"_blank\">Télécharger la fiche</a></span></div>";
      }

      break;
    case "something_else":
      // ...
      break;
  }
}

function reseau_preprocess_html(&$variables)
{
  $view_mode = $variables;
  // dsm($view_mode);
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof NodeInterface) {
    $variables['attributes']['class'][] = 'page-node-' . $node->getType();
    $variables['attributes']['class'][] = 'page-node-' . $node->id();

    if ($node->hasField('field_structure_associee') && !$node->get('field_structure_associee')->isEmpty()) {
      $terms = $node->get('field_structure_associee')->getValue();
      $variables['attributes']['class'][] = 'page-node-structure' . $terms[0]['target_id'];
    }
    // dsm((int)$node->id());
    // dsm((int)$node->id() % 2);
    // if ((int)$node->id() % 2 == 0) {
      $variables['attributes']['class'][] = 'page-node-verticale';
    // }

  } else {
    $variables['attributes']['class'][] = 'page-no-node';
  }

  $view = \Drupal::routeMatch()->getParameter('view_id');

  if ($view) {
    $current_path = \Drupal::service('path.current')->getPath();
    $internal_path = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);

    // Assign it to body class 
    $variables['attributes']['class'][] = str_replace("/", "", $internal_path);
  }

  // Prefetch Google fonts
  $variables['#attached']['html_head'][] = [
    [
      '#tag' => 'link',
      '#attributes' => [
        'rel' => 'dns-prefetch',
        'href' => 'https//fonts.googleapis.com'
      ]
    ],
    "prefetch_fonts_googleapis"
  ];
  // Preconnect Google fonts
  $variables['#attached']['html_head'][] = [
    [
      '#tag' => 'link',
      '#attributes' => [
        'rel' => 'preconnect',
        'href' => 'https://fonts.gstatic.com/',
        'crossorigin' => 'anonymous',
      ]
    ],
    "preconnect_fonts_gstatic"
  ];
}

//Réécriture des termes coté public
function reseau_preprocess_views_view_field(&$variables)
{
  if ($variables['view']->id() === 'resultats' && $variables['view']->current_display === 'block_2'  && $variables['field']->options['id'] === 'field_stagiaires') {

    if (isset($variables['view']->args[0])) {
      $string = $variables['output'];

      if (($variables['view']->args[0] == '1') || ($variables['view']->args[0] == '44')) {
        $variables['output'] = \Drupal\Core\Render\Markup::create(str_replace("Stagiaires", "Stagiaires<small> / </small>Apprentis", $string));
      }
      if (($variables['view']->args[0] == '56') || ($variables['view']->args[0] == '134')) {
        $variables['output'] = \Drupal\Core\Render\Markup::create(str_replace("Stagiaires", "Apprentis", $string));
      }
    }
  }
}

//Ajoute formations dns bredcrumb
function reseau_preprocess_breadcrumb(&$variables)
{
  if (($node = \Drupal::routeMatch()->getParameter('node')) && $variables['breadcrumb'] && $node->getType() == "formation") {

    $original = $variables['breadcrumb'];
    $inserted = ['2' => ['text' => "Formations", 'url' => '/formations']];

    array_splice($original, 2, 0, $inserted);

    $variables['#cache']['contexts'][] = 'url.path';

    $variables['breadcrumb'] = $original;
  }
}

//Inutile depuis imge responsive?
// function reseau_preprocess_image(&$variables) {

// if (($variables['width'] == '1920')&& ($variables['uri'] == 'public://2021-06/banniere-1.jpg')) {
//   $variables['attributes']['loading'] = 'eager';
//   // dsm($variables);
// }

//   }

// ajoute la variable node id au template field_group
function reseau_preprocess_field_group_html_element(array &$variables, $hook) {
  if ($node = \Drupal::request()->attributes->get('node')) {
    $variables['nid'] = $node->id();
  }
}

/**
 * Temporary workaround for Drupal core issue #3456176.
 *
 * Since Drupal 10.3, status messages are rendered via a MessageCommand
 * (for BigPipe compatibility), which bypasses the status-messages.html.twig template.
 *
 * This patch manually injects the messages to restore the expected Twig override.
 *
 * Note: This issue is not planned to be fixed before Drupal 11 (see #3396318).
 *
 * @see https://www.drupal.org/project/drupal/issues/3456176
 * @see https://www.drupal.org/project/drupal/issues/3396318
 */
function reseau_preprocess_block__system_messages_block(&$variables) {
  $variables['content'] = \Drupal\Core\Render\Element\StatusMessages::renderMessages();
}
