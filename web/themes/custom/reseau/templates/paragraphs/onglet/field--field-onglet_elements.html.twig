{#
/**
 * @file
 * Theme override for a field.
 *
 * To override output, copy the "field.html.twig" from the templates directory
 * to your theme's directory and customize it, just like customizing other
 * Drupal templates such as page.html.twig or node.html.twig.
 *
 * Instead of overriding the theming for all fields, you can also just override
 * theming for a subset of fields using
 * @link themeable Theme hook suggestions. @endlink For example,
 * here are some theme hook suggestions that can be used for a field_foo field
 * on an article node type:
 * - field--node--field-foo--article.html.twig
 * - field--node--field-foo.html.twig
 * - field--node--article.html.twig
 * - field--field-foo.html.twig
 * - field--text-with-summary.html.twig
 * - field.html.twig
 *
 * Available variables:
 * - attributes: HTML attributes for the containing element.
 * - label_hidden: Whether to show the field label or not.
 * - title_attributes: HTML attributes for the title.
 * - label: The label for the field.
 * - multiple: TRUE if a field can contain multiple items.
 * - items: List of all the field items. Each item contains:
 *   - attributes: List of HTML attributes for each item.
 *   - content: The field item's content.
 * - entity_type: The entity type to which the field belongs.
 * - field_name: The name of the field.
 * - field_type: The type of the field.
 * - label_display: The display settings for the label.
 *
 * @see template_preprocess_field()
 */
#}
{%
  set classes = [
  ''
  ]
%}
{%
  set title_classes = [
    label_display == 'visually_hidden' ? 'visually-hidden',
  ]
%}

	<ul class="nav nav-tabs flex-nowrap" role="tablist">
  {% for key, item in items %}
		{% if key|first != '#' %}
		{# {% for item in items %} #}
		{% set item_id = item.content['#paragraph'].get('uuid').value %}
		{% set item_titre = item.content['#paragraph'].get('field_onglet_titre').value %}

		{% set tab_id = 'onglet-' ~ key %}
		{# {{ kint(key) }} #}
		<li role="presentation" class="nav-item">
			<button class="nav-link{% if loop.first %} active{% endif %}" id="{{ item_id }}" data-bs-toggle="tab" data-bs-target="#{{ tab_id }}" type="button" role="tab" aria-controls="{{ tab_id }}" aria-selected="{% if loop.first %} true{% endif %}">{{ item_titre }}</button>
		</li>
    {% endif %}
	{% endfor %}
</ul>

<div class="tab-content" id="myTabContent">
{% for key, item in items %}
		{% if key|first != '#' %}
		{% set item_id = item.content['#paragraph'].get('uuid').value %}
    {% set item_body1 = item.content['#paragraph'].get('field_onglet_texte').value %}
    {% set item_body = drupal_field('field_onglet_texte', 'paragraph', item.content['#paragraph'].get('id').value) %}
		{% set tab_id = 'onglet-' ~ key %}
    	{# {{ kint(item_body1) }} #}
    	{# {{ kint(item_body|raw) }} #}
		<div class="tab-pane fade {% if loop.first %}show active{% endif %}" id="{{tab_id}}" role="tabpanel" aria-labelledby="{{item_id}}">
			{{ item_body|raw }}
		</div>
		
				{% endif %}
	{% endfor %}
</div>


{# {% if label_hidden %}
  {% if multiple %}
   
      {% for item in items %}
        <div{{ item.attributes.addClass(classes) }}>{{ item.content }}</div>
      {% endfor %}

  {% else %}
    {% for item in items %}
      <div{{ attributes.addClass(classes) }}>{{ item.content }}</div>
    {% endfor %}
  {% endif %}
{% else %}
  <div{{ attributes.addClass(classes) }}>
    <div{{ title_attributes.addClass(title_classes) }}>{{ label }}</div>
    {% if multiple %}
      <div>
    {% endif %}
    {% for item in items %}
      <div{{ item.attributes }}>{{ item.content }}</div>
    {% endfor %}
    {% if multiple %}
      </div>
    {% endif %}
  </div>
{% endif %} #}
